// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/mkaiho/go-auth-api/entity"
	mock "github.com/stretchr/testify/mock"

	port "github.com/mkaiho/go-auth-api/usecase/port"
)

// UserGateway is an autogenerated mock type for the UserGateway type
type UserGateway struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, input
func (_m *UserGateway) Create(ctx context.Context, input port.UserCreateInput) (*entity.User, error) {
	ret := _m.Called(ctx, input)

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, port.UserCreateInput) (*entity.User, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, port.UserCreateInput) *entity.User); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, port.UserCreateInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, id
func (_m *UserGateway) Get(ctx context.Context, id entity.ID) (*entity.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ID) (*entity.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.ID) *entity.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.ID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, input
func (_m *UserGateway) List(ctx context.Context, input port.UserListInput) (entity.Users, error) {
	ret := _m.Called(ctx, input)

	var r0 entity.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, port.UserListInput) (entity.Users, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, port.UserListInput) entity.Users); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entity.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, port.UserListInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, input
func (_m *UserGateway) Update(ctx context.Context, input port.UserUpdateInput) (*entity.User, error) {
	ret := _m.Called(ctx, input)

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, port.UserUpdateInput) (*entity.User, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, port.UserUpdateInput) *entity.User); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, port.UserUpdateInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserGateway interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserGateway creates a new instance of UserGateway. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserGateway(t mockConstructorTestingTNewUserGateway) *UserGateway {
	mock := &UserGateway{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
