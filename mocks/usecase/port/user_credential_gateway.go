// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/mkaiho/go-auth-api/entity"
	mock "github.com/stretchr/testify/mock"

	port "github.com/mkaiho/go-auth-api/usecase/port"
)

// UserCredentialGateway is an autogenerated mock type for the UserCredentialGateway type
type UserCredentialGateway struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, input
func (_m *UserCredentialGateway) Create(ctx context.Context, input port.UserCredentialCreateInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, port.UserCredentialCreateInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *UserCredentialGateway) GetByEmail(ctx context.Context, email entity.Email) (*entity.UserCredential, error) {
	ret := _m.Called(ctx, email)

	var r0 *entity.UserCredential
	if rf, ok := ret.Get(0).(func(context.Context, entity.Email) *entity.UserCredential); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserCredential)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.Email) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserCredentialGateway interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserCredentialGateway creates a new instance of UserCredentialGateway. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserCredentialGateway(t mockConstructorTestingTNewUserCredentialGateway) *UserCredentialGateway {
	mock := &UserCredentialGateway{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
