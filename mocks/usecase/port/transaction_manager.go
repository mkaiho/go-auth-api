// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TransactionManager is an autogenerated mock type for the TransactionManager type
type TransactionManager struct {
	mock.Mock
}

// BeginContext provides a mock function with given fields: parent
func (_m *TransactionManager) BeginContext(parent context.Context) (context.Context, error) {
	ret := _m.Called(parent)

	var r0 context.Context
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (context.Context, error)); ok {
		return rf(parent)
	}
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(parent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(parent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// End provides a mock function with given fields: ctx
func (_m *TransactionManager) End(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Rollback provides a mock function with given fields: ctx
func (_m *TransactionManager) Rollback(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTransactionManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionManager creates a new instance of TransactionManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionManager(t mockConstructorTestingTNewTransactionManager) *TransactionManager {
	mock := &TransactionManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
